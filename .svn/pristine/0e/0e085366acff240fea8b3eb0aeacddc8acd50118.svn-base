package kr.co.mpago.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;

import kr.co.mpago.domain.Movie;
import kr.co.mpago.mapper.MovieMapper;

import kr.co.mpago.util.DBUtils;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.extern.log4j.Log4j;

@Log4j
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class MovieService {
	@Getter
	private static MovieService movieService = new MovieService();
	private MovieMapper movieMapper = DBUtils.sqlSessionFactory().openSession(true).getMapper(MovieMapper.class);
	
	
	/**
	 * ApiUrl값(실제 https:// 주소값)
	 * @param mno
	 * @param apiKey
	 * @return
	 */
	public String getApiUrl(Long mno, String apiKey) {
		return "https://api.themoviedb.org/3/movie/" + mno + "?language=ko-kr&api_key=" + apiKey;
	}
	
	/**
	 * JSON 데이터를 가져옴
	 * 
	 * @param apiUrl
	 * 
	 * 
	 * @return jsonMovieData
	 * @throws IOException
	 */
	public String fetchJsonData(String apiUrl) throws IOException {
		URL url = new URL(apiUrl);
		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        int responseCode = connection.getResponseCode();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            log.info("fetchJsonData()_OK");
            return response.toString();
        } else {
        	log.info("fetchJsonData()_failed");
            return null;
        }
	}

	/**
	 * JSON 데이터를 파싱하여 데이터베이스에 저장
	 * 
	 * @param mno
	 * @param apiKey
	 * @param jsonMovieData 
	 * @throws IOException
	 */
	public void addMovieDataFromJson(Long mno, String apiKey, String apiUrl) throws IOException {
		
		String jsonMovieData = fetchJsonData(apiUrl); 
		log.info(jsonMovieData);
		if(jsonMovieData != null) {
			Gson gson = new Gson();
			Movie movie = gson.fromJson(jsonMovieData, Movie.class);
			if((movie.getLanguage().equals("en") || movie.getLanguage().equals("ko")) && !movie.getMdate().equals("")) {
				try { movieMapper.insertMovie(movie);} catch (Exception e) {}				
			}
		}
	}
	
	/**
	 * 영화 단일 조회 
	 * @param mno
	 * @return 
	 */
	public Movie findMovie(Long mno) {
		return movieMapper.selectMovie(mno);
	}
	
	/**
	 * 영화 수정
	 * @param movie
	 * @return
	 */
	public boolean modifyMovie(Movie movie) {
		return movieMapper.updateMovie(movie) > 0;
	}
	
	/**
	 * 영화 삭제
	 * @param mno
	 * @return
	 */
	public boolean removeMovie(Long mno) {
		return movieMapper.deleteMovie(mno) > 0;
	}
	
	/**
	 * 영화 전체 갯수
	 * @return
	 */
	public int findTotal() {
		return movieMapper.selectMovieTotal();
	}
	
	/**
	 * 
	 * 영화제목, 배우이름 검색
	 * kht
	 * @return
	 */
	public List<Movie> search(String search) {
		return movieMapper.searchMoviCas(search);
	}
}
