package kr.co.mpago.service;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;

import kr.co.mpago.domain.Cast;
import kr.co.mpago.domain.Casts;
import kr.co.mpago.domain.Genre;
import kr.co.mpago.domain.Genres;
import kr.co.mpago.domain.MovieCast;
import kr.co.mpago.domain.MovieGenre;
import kr.co.mpago.mapper.MovieCastMapper;
import kr.co.mpago.util.DBUtils;
import kr.co.mpago.util.MovieJsonDataFetcher;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.extern.log4j.Log4j;

// test X
@Log4j
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class MovieCastService {
	@Getter
	private static MovieCastService movieCastService = new MovieCastService();
	private MovieCastMapper movieCastMapper = DBUtils.sqlSessionFactory().openSession(true).getMapper(MovieCastMapper.class);
	
	/**
	 * 배우 추가
	 * @param genre
	 */
	public void addMovieCast(MovieCast movieCast) {
		movieCastMapper.insertMovieCastMapping(movieCast);
	}
	/** 
	 * 배우 리스트조회
	 * @return
	 */
	public List<Map<String, Object>> getMovieCastList(Long castno) {
		return movieCastMapper.selectMovieListByCast(castno);
	}
	
	/**
	 * mno번 영화의 배우 List 조회 
	 * @param mno
	 * @return
	 */
	public List<MovieCast> getListByMovie(Long mno) {
		return movieCastMapper.selectListByMovie(mno);
	}
	
	/**
	 * castno번 배우의 영화 List 조회
	 * @param castno
	 * @return
	 */
	public List<MovieCast> getListByCast(Long castno) {
		return movieCastMapper.selectListByCast(castno);
	}
	/**
	 * 배우 선택
	 * @param castno
	 * @return
	 */
	public List<Map<String, Object>> getMovieCast(Long mno) {
		return movieCastMapper.selectCastListByMovie(mno);
	}
	
	/**
	 * 배우 삭제
	 * @param mcno
	 * @return
	 */
	public boolean removeMovieCast(Long mcno) {
		return movieCastMapper.deleteMovieCastMapping(mcno) > 0;
	}
	
	/**
	 * 장르 변경
	 * @param movieCast
	 * @return
	 */
	public boolean modifyMovieCast(MovieCast movieCast) {
		return movieCastMapper.updateMovieCastMapping(movieCast) > 0;
	}
	
	/**
	 * ApiUrl값(실제 https:// 주소값)
	 * @author gilho
	 * @param mno
	 * @param apiKey
	 * @return
	 */
	public String getMovieApiUrl(Long mno, String apiKey) {
		return "https://api.themoviedb.org/3/movie/" + mno + "/credits?api_key=" + apiKey +"&language=ko-kr";
	}
	/**
	 * 관리자 페이지 영화 삭제시 참조 테이블 삭제
	 * @author youngmin
	 * @param mno
	 * @return
	 */
	/*
	 * public void deleteByMovieNos(List<Long> movieNos) {
	 * movieCastMapper.deleteByMovieNos(movieNos); }
	 */
	/**
	 * JSON 데이터를 파싱하여 데이터베이스에 저장 (Map 형태)
	 * @author gilho
	 * @param mno
	 * @param apiKey
	 * @param jsonMovieData 
	 * @throws IOException
	 */
	public void addMovieDataFromJson(Long mno, String apiKey, String apiUrl) throws IOException {
		MovieJsonDataFetcher fetcher = new MovieJsonDataFetcher();
		String jsonMovieData = fetcher.fetchJsonData(apiUrl);
		log.info(jsonMovieData);
		if(jsonMovieData != null) {
			Gson gson = new Gson();
			Casts casts = gson.fromJson(jsonMovieData, Casts.class);
			List<Cast> results = casts.getCasts();
			log.info(results);
			if (results != null) {
	            for (Cast cast : results) {
	            	MovieCast movieCast = MovieCast.builder()
	            			.castno(cast.getCastno()).mno(mno)
	            			.build();
	            	
	            	try { movieCastMapper.insertMovieCastMapping(movieCast); } catch (Exception e) {e.printStackTrace(); }		
	            }
	        }
		}
	}
}
